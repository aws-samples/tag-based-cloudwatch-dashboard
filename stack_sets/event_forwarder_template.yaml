AWSTemplateFormatVersion: '2010-09-09'

Resources:

  CentralEventBusForwardingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'events.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'AllowSendEventsToCentralBusPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'events:PutEvents'
                Resource: 'REPLACE_WITH_CENTRAL_BUS_ARN'

  AlarmStateChangeEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Listens for CloudWatch Alarm State Change and forwards to central event bus'
      EventPattern:
        source:
          - 'aws.cloudwatch'
        detail-type:
          - 'CloudWatch Alarm State Change'
      State: 'ENABLED'
      Targets:
        - Arn: 'REPLACE_WITH_CENTRAL_BUS_ARN'
          Id: 'Target1'
          RoleArn: !GetAtt [ CentralEventBusForwardingRole, Arn ]

  AugmentorLambdaFunctionServiceRoleBD075F3E:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      'aws:cdk:path': CdkStack/AugmentorLambdaFunction/ServiceRole/Resource
  AugmentorLambdaFunctionServiceRoleDefaultPolicyF6E6D024:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'account:GetAlternateContact'
              - 'cloudwatch:ListTagsForResource'
              - 'ec2:DescribeInstances'
              - 'xray:PutTelemetryRecords'
              - 'xray:PutTraceSegments'
            Effect: Allow
            Resource: '*'
          - Action: 'events:PutEvents'
            Effect: Allow
            Resource: 'REPLACE_WITH_CENTRAL_BUS_ARN'
        Version: 2012-10-17
      PolicyName: AugmentorLambdaFunctionServiceRoleDefaultPolicyF6E6D024
      Roles:
        - !Ref AugmentorLambdaFunctionServiceRoleBD075F3E
    Metadata:
      'aws:cdk:path': CdkStack/AugmentorLambdaFunction/ServiceRole/DefaultPolicy/Resource
  AugmentorLambdaFunction5F594917:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: "import boto3

import json

from botocore.exceptions import ClientError


ec2 = boto3.client('ec2')

events = boto3.client('events')

cw = boto3.client('cloudwatch')

acct = boto3.client('account')



def is_expression_alarm(alarm):

\    for metric in alarm[\"detail\"][\"configuration\"][\"metrics\"]:

\        if 'expression' in metric:

\            return True


\    return False



def get_alarm_type(alarm):

\    if \"metrics\" not in alarm[\"detail\"][\"configuration\"]:

\        return \"composite\"

\    elif is_expression_alarm(alarm):

\        return \"expression\"

\    else:

\        return \"standard\"



def get_ec2_instance_info(instance_id):

\    # TODO: Implement Pagination

\    try:

\        response = ec2.describe_instances(InstanceIds=[instance_id])

\        return response['Reservations'][0]['Instances'][0]

\    except:

\        return []



def forward_event(event):

\    events.put_events(Entries=[{

\        'Source': 'aws-ec2-instance-info',

\        'DetailType': 'Instance Info',

\        'Detail': event,

\        'EventBusName': 'REPLACE_WITH_CENTRAL_BUS_ARN'

\        }]

\    )



def get_alarm_tags(alarm_arn):

\    response = cw.list_tags_for_resource(

\        ResourceARN=alarm_arn

\    )

\    print(json.dumps(response))

\    return response



def lambda_handler(event, context):

\    print(json.dumps(event))

\    payload = {}

\    event_sent = False

\    payload['AlarmName'] = event[\"detail\"][\"alarmName\"]

\    payload['Account'] = event[\"account\"]

\    alarm_tags = get_alarm_tags(event[\"resources\"][0])['Tags']

\    print(json.dumps(alarm_tags))

\    payload['AlarmTags'] = alarm_tags

\    if len(alarm_tags) == 0:

\        payload['Priority'] = 2

\    else:

\        for tag in alarm_tags:

\            if tag['Key'].lower() == 'priority':

\                match tag['Value'].lower():

\                    case 'high':

\                        payload['Priority'] = 1

\                    case \"critical\":

\                        payload['Priority'] = 1

\                    case \"urgent\":

\                        payload['Priority'] = 1

\                    case \"medium\":

\                        payload['Priority'] = 2

\                    case \"standard\":

\                        payload['Priority'] = 2

\                    case \"normal\":

\                        payload['Priority'] = 2

\                    case \"low\":

\                        payload['Priority'] = 3

\                    case _:

\                        payload['Priority'] = 2

\                break

\    try:

\        result = acct.get_alternate_contact(

\            AlternateContactType='OPERATIONS'

\        )

\        payload['AlternateContact'] = result['AlternateContact']

\        print(f'Contact: {result[\"AlternateContact\"]}')

\    except:

\        print('Account has no OPERATIONS contact or request failed')


\    if get_alarm_type(event) == \"standard\":

\        for metric in event[\"detail\"][\"configuration\"][\"metrics\"]:

\            if \"metricStat\" in metric and not event_sent:

\                for dimension in list(metric[\"metricStat\"][\"metric\"][\"dimensions\"].keys()):

\                    try:

\                        if dimension == \"InstanceId\":

\                            instance_id = metric[\"metricStat\"][\"metric\"][\"dimensions\"][dimension]

\                            instance_info = get_ec2_instance_info(instance_id)

\                            print(instance_info)

\                            if len(instance_info) == 0:

\                                payload['InstanceInfo'] = {'Error': 'Instance not found'}

\                            else:

\                                payload['InstanceInfo'] = instance_info

\                            print('PAYLOAD')

\                            print(payload)

\                            forward_event(json.dumps(payload, indent=4, sort_keys=True, default=str))

\                            event_sent = True

\                            break

\                    except ClientError as error:

\                        print('Error happened: {}'.format(error))

\                        continue

\            else:

\                print(\"Ignoring metric\")

\    else:

\        print(json.dumps(payload, indent=4, sort_keys=True, default=str))

\        forward_event(json.dumps(payload, indent=4, sort_keys=True, default=str))

\          "
      FunctionName: CloudWatchEventAugmentorCDK
      Handler: index.lambda_handler
      Role: !GetAtt
        - AugmentorLambdaFunctionServiceRoleBD075F3E
        - Arn
      Runtime: python3.11
      Timeout: 60
      TracingConfig:
        Mode: Active
    DependsOn:
      - AugmentorLambdaFunctionServiceRoleDefaultPolicyF6E6D024
      - AugmentorLambdaFunctionServiceRoleBD075F3E
    Metadata:
      'aws:cdk:path': CdkStack/AugmentorLambdaFunction/Resource
  AugmentorTrigger59D4A776:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.cloudwatch
        detail-type:
          - CloudWatch Alarm State Change
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - AugmentorLambdaFunction5F594917
            - Arn
          Id: Target0
    Metadata:
      'aws:cdk:path': CdkStack/AugmentorTrigger/Resource
  AugmentorTriggerAllowEventRuleCdkStackAugmentorLambdaFunction8BC9B2837766F642:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt
        - AugmentorLambdaFunction5F594917
        - Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - AugmentorTrigger59D4A776
        - Arn

Outputs:
  CentralEventBusForwardingRoleArn:
    Description: 'ARN of the IAM Role for EventBridge'
    Value: !GetAtt [ CentralEventBusForwardingRole, Arn ]

  AlarmStateChangeEventRuleName:
    Description: 'Name of the EventBridge rule'
    Value: !Ref AlarmStateChangeEventRule